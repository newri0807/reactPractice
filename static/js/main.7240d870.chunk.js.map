{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Modal","props","className","글제목","누른제목","App","useState","modal","modal변경","글제목변경","따봉","따봉변경","누른제목변경","입력값","입력값변경","map","a","i","onClick","copy","onChange","e","target","value","newArray","unshift","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNA6FA,SAASA,EAAMC,GAGX,OAEE,sBAAKC,UAAU,QAAf,UACE,iDAAUD,EAAME,mBAAIF,EAAMG,6BAC1B,6CACA,4DAQOC,MA1Gf,WAEE,MAAuBC,oBAAS,GAAhC,mBAAKC,EAAL,KAAYC,EAAZ,KACA,EAAmBF,mBAAS,CAAC,wCAAW,wCAAW,mCAAnD,mBAAKH,EAAL,KAAUM,EAAV,KACA,EAAiBH,mBAAS,CAAC,EAAE,EAAE,IAA/B,mBAAKI,EAAL,KAASC,EAAT,KACA,EAAqBL,mBAAS,CAAC,EAAE,EAAE,IAAnC,mBAAKF,EAAL,KAAWQ,EAAX,KAEA,EAAmBN,mBAAS,IAA5B,mBAAKO,EAAL,KAAUC,EAAV,KAIA,OACE,sBAAKZ,UAAU,MAAf,UAEE,qBAAKA,UAAU,MAAf,SACE,wCAKAC,EAAIY,KAAI,SAAUC,EAAGC,GACrB,OACE,sBAAKf,UAAU,OAAf,UACE,qBAAIgB,QAAS,WAAQN,EAAOK,IAA5B,cAAoCD,EAClC,uBAAME,QAAS,WACb,IAAIC,EAAI,YAAOT,GAEfS,EAAKF,KACLN,EAAKQ,IACJjB,UAAU,QALb,6CAMUQ,EAAGO,SAGf,8DAaA,yBAxB0BA,MAkChC,sBAAKf,UAAU,UAAf,UACE,uBAAOkB,SAAU,SAACC,GAAKP,EAAMO,EAAEC,OAAOC,UACtC,wBAAQL,QACJ,WACE,IAAIM,EAAQ,YAAOrB,GACnBqB,EAASC,QAAQZ,GACjBJ,EAAMe,IAJZ,6BAWE,qBAAMtB,UAAU,SAAhB,SAIE,wBAAQgB,QAAS,WAAQV,GAASD,IAAlC,yCAIU,IAAVA,EACI,cAACP,EAAD,CAAOG,qBAAKA,EAAKC,2BAAMA,IACvB,SCtEDsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7240d870.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\n\nfunction App() {\n\n  let [modal, modal변경] = useState(false);  // 첫 화면에선 UI가 보이지않는 상태정보를 state로 만들어둠 \n  let [글제목, 글제목변경] = useState(['남자코트 추천', '강남 우동맛집', '파이썬독학']);\n  let [따봉, 따봉변경] = useState([0,0,0]);\n  let [누른제목, 누른제목변경] = useState([0,0,0]);\n  //let [버튼, 버튼변경] = useState([0, 0, 0]);\n  let [입력값, 입력값변경] = useState('');\n\n\n\n  return (\n    <div className=\"App\">\n\n      <nav className=\"nav\">\n        <h3>Blog</h3>\n      </nav>\n\n      \n\n      { 글제목.map(function (a, i) {\n        return (\n          <div className=\"list\"  key={i}>\n            <h3 onClick={() => { 누른제목변경(i) }}> {a}\n              <span onClick={() => {\n                let copy = [...따봉]; \n                //copy.unshift(입력값);\n                copy[i]++; // 증감식                \n                따봉변경(copy)\n              }} className=\"likes\">\n                좋아요 👍 {따봉[i]}\n              </span>\n            </h3>\n            <p>2월 18일 발행</p>\n{/* \n              <button onClick={() => {\n                  누른제목변경(i); \n                  modal변경(!modal) \n              }} > 열기 </button>\n                {\n                  modal === true \n                    ? <Modal 글제목={글제목[i]} 누른제목={누른제목} i={i}/>\n                    : null\n                } */}\n\n\n            <hr />\n            \n            </div>\n\n            \n          )\n        })\n      }\n\n\n      <div className=\"publish\">\n        <input onChange={(e)=>{입력값변경(e.target.value)}}/>\n        <button onClick={\n            ()=>{\n              var newArray = [...글제목];\n              newArray.unshift(입력값);\n              글제목변경(newArray);          \n            }\n\n\n        }>저장</button>\n      </div>\n\n          <div  className=\"opnCls\">\n            {/* <button onClick={() => { 누른제목변경(0) }}>버튼1</button>\n            <button onClick={() => { 누른제목변경(1) }}>버튼2</button>\n            <button onClick={() => { 누른제목변경(2) }}>버튼3</button> */}\n            <button onClick={() => { modal변경(!modal) }}>열고닫기</button>\n          </div>\n          \n          {\n            modal === true\n              ? <Modal 글제목={글제목} 누른제목={누른제목} />\n              : null\n          }\n\n\n                          \n\n    </div>\n\n  );\n}\n\nfunction Modal(props) {\n  \n\n    return (\n\n      <div className=\"modal\">\n        <h5>제목 : {props.글제목[props.누른제목]}</h5>\n        <p>날짜</p>\n        <p>상세내용</p>\n      </div>\n  \n  \n  \n  \n    )\n    }\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}